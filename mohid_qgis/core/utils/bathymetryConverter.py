import shapefile
import os

def saveToMohidFile(outputPath, data):

    if not outputPath.endswith(".dat"):
        outputPath = outputPath + ".dat"

    with open(outputPath, 'w') as f:
        f.write("COMEMNT: File generated by\n")
        f.write("COMEMNT: MOHID QGIS Plugin\n")
        f.write("\n\n")

        try:
            f.write(f"ILB_IUB :      {data['ILB']} {data['IUB']}\n")
            f.write(f"JLB_JUB :      {data['JLB']} {data['JUB']}\n")
            f.write(f"COORD_TIP :    {data['COORD_TIP']}\n")
            f.write(f"ORIGIN :       {data['ORIGIN_X']} {data['ORIGIN_Y']}\n")
            f.write(f"GRID_ANGLE :   {data['GRID_ANGLE']}\n")
            f.write(f"SRID :         {data['SRID']}\n")
            f.write(f"LATITUDE :     {data['LATITUDE']}\n")
            f.write(f"LONGITUDE :    {data['LONGITUDE']}\n")
            f.write(f"FILL_VALUE :   {data['FILL_VALUE']}\n")

            if data['ZONE'] is not None:
                f.write(f"ZONE :         {data['ZONE']}\n")
            
            f.write("\n\n")
            
            f.write("<BeginXX>\n")
            for p in data['POINTS_XX']:
                f.write(f"{p:.15f}\n")
            f.write("<EndXX>\n")

            f.write("<BeginYY>\n")
            for p in data['POINTS_YY']:
                f.write(f"{p:.15f}\n")
            f.write("<EndYY>\n")

            f.write("<BeginGridData2D>\n")
            for p in data['DATA_2D']:
                f.write(f"{p:.15f}\n")
            f.write("<EndGridData2D>\n")
        except Exception:
            # logger.debug("Something went wrong saving to mohid file")
            pass

def saveGenerateMohidFile(filepath, gridPath, xyzPath, landPath = None):
    
    with open(filepath, "w") as f:
        f.write(f"BATIM_FILE: {filepath}\n")
        f.write("\n")
        f.write(f"GRID_FILE: {gridPath}\n")
        f.write("\n")

        if landPath is not None:
            f.write("<BeginLandAreaFiles>\n")
            f.write(f"{landPath}\n")
            f.write("<EndLandAreaFiles>\n")
        
        f.write("\n\n")

        f.write("<BeginXYZPointsFiles>\n")
        f.write(f"{xyzPath}\n")
        f.write("<EndXYZPointsFiles>\n")

        f.write("\n\n")

        f.write(f"SMOOTH                    : 0\n")
        f.write(f"RADIUS                    : 0.008\n")
        f.write("\n\n")
        f.write(f"INTERPOLATION             : No Interpolation\n")
        f.write("\n")
        f.write(f"POINTS_FOR_INTERPOLATION  : 3\n")
        f.write(f"EXPAND_GRID_LIMITS        : 1\n")
        f.write(f"GRID_LIMITS_PERCENTAGE    : 0.25\n")

def MOHIDBathymetry2shp(input_path, data = None):
    
    readFile = False
    if data is None:
        readFile = True
    
    if readFile:
        pass
        # with open(input_path, "r") as input_f:
        #     with shapefile.Writer(os.path.splitext(input_path)[0]) as writer:
        #         writer.autoBalance = 1
        #         writer.field("depth", "F", size=20, decimal=8)

        #         for line in input_f.readlines():
        #             line = line.strip("\n")
        #             if line == "<begin_xyz>":
        #                 pass
        #             elif line == "<end_xyz>":
        #                 pass
        #             else:
        #                 nums = list(filter(lambda x: x != '', line.split(" ")))
        #                 writer.record(float(nums[2]))
        #                 writer.point(float(nums[0]), float(nums[1]))
    else:
        with shapefile.Writer(os.path.splitext(input_path)[0]) as writer:
            writer.autoBalance = 1
            writer.field("depth", "F", size=20, decimal=8)
            maxI = data['IUB']
            maxJ = data['JUB']
            DX = data['POINTS_XX']
            DY = data['POINTS_YY']
            depthData = data['DATA_2D']
            originX = data['ORIGIN_X']
            originY = data['ORIGIN_Y']
            depthInd = 0
            print(f"depth data length {len(depthData)}")
            # for i, depth in enumerate(depth):
            for i in range(maxI):
                for j in range(maxJ):
                    # writer.record(float(nums[2]))
                    # writer.point(float(nums[0]), float(nums[1]))
                    vertices = []
                    parts = []
                    
                    # Cell vertices
                    # Special attention to first cell of each row

                    vertices.append([originX + DX[j], originY + DY[i]])     # Bottom left corner
                    vertices.append([originX + DX[j + 1], originY + DY[i]]) # Bottom rigth corner
                    vertices.append([originX + DX[j + 1], originY + DY[i + 1]]) # # Top rigth corner
                    vertices.append([originX + DX[j], originY + DY[i + 1]]) # Top left corner


                    # vertices.append([originX + DX[j], originY + DY[maxI - i - 1]]) #4
                    # vertices.append([originX + DX[j + 1], originY + DY[maxI - i - 1]]) #3
                    # vertices.append([originX + DX[j + 1], origin_y + (i_max - i) * dy]) #2
                    # vertices.append([originX + DX[j], origin_y + (i_max - i) * dy]) #1
                    
                    parts.append(vertices)
                    writer.poly(parts)
                    print(depthInd)
                    writer.record(depth=depthData[depthInd])
                    depthInd += 1
                    
                    
    return