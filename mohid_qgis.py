# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MohidPlugin
                                 A QGIS plugin
 QGIS plugin for the MOHID model
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-02
        git sha              : $Format:%H$
        copyright            : (C) 2021 by MARETEC
        email                : vasco.guita@tecnico.ulisboa.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon, QDoubleValidator
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .mohid_qgis_dockwidget import MohidPluginDockWidget
import os.path

from .point import Point
from .grid import Grid
from .variable_spaced_grid import VariableSpacedGrid
from .regular_grid import RegularGrid
from qgis.core import QgsProject, QgsPointXY
from .capture_point_tool import CapturePointTool
from .not_empty_validator import NotEmptyValidator
from .greater_than_zero_double_validator import GreaterThanZeroDoubleValidator


class MohidPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MohidPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MOHID')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'MohidPlugin')
        self.toolbar.setObjectName(u'MohidPlugin')

        # print "** INITIALIZING MohidPlugin"

        self.pluginIsActive = False
        self.dockwidget = None

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MohidPlugin', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/mohid_qgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MOHID plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

    # --------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # print "** CLOSING MohidPlugin"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        if self.dockwidget.toolButtonCapturePoint.isChecked():
            self.dockwidget.toolButtonCapturePoint.toggle()

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # print "** UNLOAD MohidPlugin"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MOHID'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    # --------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # print "** STARTING MohidPlugin"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = MohidPluginDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            self.dockwidget.mQgsProjectionSelectionWidget.setCrs(
                QgsProject.instance().crs())

            self.setCapturePointTool()
            self.setValidators()
            self.connectWidgets()

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def setCapturePointTool(self):
        crs = self.dockwidget.mQgsProjectionSelectionWidget.crs()
        self.capturePointTool = CapturePointTool(self.iface.mapCanvas(), crs)
        self.capturePointTool.setButton(self.dockwidget.toolButtonCapturePoint)
        self.capturePointTool.canvasClicked.connect(self.canvasClicked)
        self.dockwidget.toolButtonCapturePoint.setIcon(
            QIcon(":images/themes/default/cursors/mCapturePoint.svg"))
        self.dockwidget.toolButtonCapturePoint.toggled.connect(
            self.toolButtonCapturePointToggled)

    def toolButtonCapturePointToggled(self):
        if self.dockwidget.toolButtonCapturePoint.isChecked():
            self.iface.mapCanvas().setMapTool(self.capturePointTool)
        else:
            self.iface.mapCanvas().unsetMapTool(self.capturePointTool)

    def canvasClicked(self, point: QgsPointXY):
        self.dockwidget.lineEditOriginLatitude.setText(str(point.x()))
        self.dockwidget.lineEditOriginLongitude.setText(str(point.y()))
        self.iface.mapCanvas().unsetMapTool(self.capturePointTool)

    def setValidators(self):
        lineEdits = [self.dockwidget.lineEditOriginLatitude,
                     self.dockwidget.lineEditOriginLongitude,
                     self.dockwidget.lineEditAngle]

        for lineEdit in lineEdits:
            validator = QDoubleValidator(lineEdit)
            lineEdit.setValidator(validator)

        lineEdits = [self.dockwidget.lineEditRegularColumnsSpacing,
                     self.dockwidget.lineEditRegularRowsSpacing,
                     self.dockwidget.lineEditVariableSpacedColumnsSpacingStart,
                     self.dockwidget.lineEditVariableSpacedColumnsSpacingEnd,
                     self.dockwidget.lineEditVariableSpacedRowsSpacingStart,
                     self.dockwidget.lineEditVariableSpacedRowsSpacingEnd]

        for lineEdit in lineEdits:
            validator =  GreaterThanZeroDoubleValidator(lineEdit)
            lineEdit.setValidator(validator)

        lineEdit = self.dockwidget.lineEditLayerName
        validator = NotEmptyValidator(lineEdit)
        lineEdit.setValidator(validator)

    def connectWidgets(self):
        self.dockwidget.mQgsProjectionSelectionWidget.crsChanged.connect(
            self.mQgsProjectionSelectionWidgetCrsChanged)

        lineEdits = [self.dockwidget.lineEditOriginLatitude,
                     self.dockwidget.lineEditOriginLongitude,
                     self.dockwidget.lineEditAngle,
                     self.dockwidget.lineEditRegularColumnsSpacing,
                     self.dockwidget.lineEditRegularRowsSpacing,
                     self.dockwidget.lineEditVariableSpacedColumnsSpacingStart,
                     self.dockwidget.lineEditVariableSpacedColumnsSpacingEnd,
                     self.dockwidget.lineEditVariableSpacedRowsSpacingStart,
                     self.dockwidget.lineEditVariableSpacedRowsSpacingEnd,
                     self.dockwidget.lineEditLayerName]

        for lineEdit in lineEdits:
            lineEdit.textChanged.connect(self.formChanged)

        self.dockwidget.radioButtonRegular.toggled.connect(
            self.radioButtonRegularToggled)
        self.dockwidget.radioButtonVariableSpaced.toggled.connect(
            self.radioButtonVariableSpacedToggled)
        self.dockwidget.pushButtonPreview.clicked.connect(
            self.pushButtonPreviewClicked)

    def mQgsProjectionSelectionWidgetCrsChanged(self):
        crs = self.dockwidget.mQgsProjectionSelectionWidget.crs()
        self.capturePointTool.setCrs(crs)

    def formChanged(self):
        formIsFilled = True

        lineEdits1 = [self.dockwidget.lineEditOriginLatitude,
                      self.dockwidget.lineEditOriginLongitude,
                      self.dockwidget.lineEditAngle,
                      self.dockwidget.lineEditLayerName]

        if self.dockwidget.radioButtonRegular.isChecked():
            lineEdits2 = [self.dockwidget.lineEditRegularColumnsSpacing,
                          self.dockwidget.lineEditRegularRowsSpacing]
        elif self.dockwidget.radioButtonVariableSpaced.isChecked():
            lineEdits2 = [self.dockwidget.lineEditVariableSpacedColumnsSpacingStart,
                          self.dockwidget.lineEditVariableSpacedColumnsSpacingEnd,
                          self.dockwidget.lineEditVariableSpacedRowsSpacingStart,
                          self.dockwidget.lineEditVariableSpacedRowsSpacingEnd]

        lineEdits = lineEdits1 + lineEdits2

        for lineEdit in lineEdits:
            if not lineEdit.hasAcceptableInput():
                formIsFilled = False
                break

        self.dockwidget.pushButtonPreview.setEnabled(formIsFilled)

    def radioButtonRegularToggled(self):
        if self.dockwidget.radioButtonRegular.isChecked():
            self.formChanged()
            self.dockwidget.widgetRegular.setVisible(True)
        else:
            self.dockwidget.widgetRegular.setVisible(False)

    def radioButtonVariableSpacedToggled(self):
        if self.dockwidget.radioButtonVariableSpaced.isChecked():
            self.formChanged()
            self.dockwidget.widgetVariableSpaced.setVisible(True)
        else:
            self.dockwidget.widgetVariableSpaced.setVisible(False)

    def pushButtonPreviewClicked(self):
        crs = self.dockwidget.mQgsProjectionSelectionWidget.crs()
        latitude = float(self.dockwidget.lineEditOriginLatitude.text())
        longitude = float(self.dockwidget.lineEditOriginLongitude.text())
        origin = Point(latitude, longitude)
        angle = float(self.dockwidget.lineEditAngle.text())
        if self.dockwidget.radioButtonRegular.isChecked():
            nColumns = self.dockwidget.spinBoxRegularColumnsQuantity.value()
            nRows = self.dockwidget.spinBoxRegularRowsQuantity.value()
            columnsSpacing = float(
                self.dockwidget.lineEditRegularColumnsSpacing.text())
            rowsSpacing = float(
                self.dockwidget.lineEditRegularRowsSpacing.text())
            grid = RegularGrid(crs, origin, nColumns, nRows,
                               columnsSpacing, rowsSpacing, angle)
        elif self.dockwidget.radioButtonVariableSpaced.isChecked():
            nColumns = self.dockwidget.spinBoxVariableSpacedColumnsQuantity.value()
            nRows = self.dockwidget.spinBoxVariableSpacedRowsQuantity.value()
            columnsSpacingStart = float(
                self.dockwidget.lineEditVariableSpacedColumnsSpacingStart.text())
            columnsSpacingEnd = float(
                self.dockwidget.lineEditVariableSpacedColumnsSpacingEnd.text())
            rowsSpacingStart = float(
                self.dockwidget.lineEditVariableSpacedRowsSpacingStart.text())
            rowsSpacingEnd = float(
                self.dockwidget.lineEditVariableSpacedRowsSpacingEnd.text())
            grid = VariableSpacedGrid(crs, origin, nColumns, nRows, columnsSpacingStart, columnsSpacingEnd,
                                      rowsSpacingStart, rowsSpacingEnd, angle)
        layerName = self.dockwidget.lineEditLayerName.text()
        layer = grid.toQgsVectorLayer(layerName)

        layersWithSameName = QgsProject.instance().mapLayersByName(layerName)
        for layerWithSameName in layersWithSameName:
            if layerWithSameName.customProperty(Grid.MohidGridLayer):
                QgsProject.instance().removeMapLayer(layerWithSameName.id())
        
        QgsProject.instance().addMapLayer(layer)
